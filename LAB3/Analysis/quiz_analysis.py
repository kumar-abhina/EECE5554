# -*- coding: utf-8 -*-
"""quiz_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pJqi7LHRWCa6vnE2dvZBrOOUt-BH83y6
"""

!pip install bagpy
!pip install allantools
from IPython.display import clear_output
clear_output()

import bagpy
from bagpy import bagreader
import pandas as pd
import seaborn as sea
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np
import sys
from scipy import stats
import allantools
import allantools
import math
import seaborn as sns

imu_bag = bagreader("Abhinav.bag")
imu_free = imu_bag.message_by_topic('/imu')

df_imu_free = pd.read_csv("Abhinav/imu.csv",sep=',')

df_imu_free.head()
time=[]
for i in df_imu_free['Header.stamp.secs']:
  time.append(i-df_imu_free['Header.stamp.secs'][0])

def quat_to_euler(quaterion):
  w,x,y,z = quaterion
  roll = math.atan2(2 * (w * x + y * z), 1 - 2 * (x ** 2 + y ** 2))
  pitch = math.asin(2 * (w * y - z * x))
  yaw = math.atan2(2 * (w * z + x * y), 1 - 2 * (y ** 2 + z ** 2))

  # Convert the angles to degrees
  roll_deg = math.degrees(roll)
  pitch_deg = math.degrees(pitch)
  yaw_deg = math.degrees(yaw)

  return roll_deg, pitch_deg, yaw_deg

imu_x, imu_y, imu_z, imu_w = df_imu_free['imu.x'], df_imu_free['imu.y'], df_imu_free['imu.z'], df_imu_free['imu.w']
roll = []
pitch = []
yaw = []

for every_elementt in zip(imu_w, imu_x, imu_y, imu_z):
  print(every_elementt)
  r,p,y= quat_to_euler(list(every_elementt)) 
  roll.append(r)
  pitch.append(p)
  yaw.append(y)

yaw

ang_acc_x = df_imu_free['angular_velocity.x'].tolist()
ang_acc_y = df_imu_free['angular_velocity.y'].tolist()
ang_acc_z = df_imu_free['angular_velocity.z'].tolist()

print(type(time), type(ang_acc_x))

from prompt_toolkit.shortcuts.dialogs import Label
fig, ax = plt.subplots(figsize=(20,7))

plt.plot(time, ang_acc_x, label = "Orientation_x")
plt.plot(time, ang_acc_y, label = "Orientation_y")
plt.plot(time, ang_acc_z, label = "Orientation_z")
# plt.xscale("time")
# plt.yscale("angukar")
plt.xlabel('time')
plt.ylabel('angular velocity in XYZ axis (rad/sec)')

plt.title("Gyro xyz")
plt.grid(False)

plt.legend()
plt.show()

lin_acc_x = df_imu_free['linear_acceleration.x'].tolist()
lin_acc_y = df_imu_free['linear_acceleration.y'].tolist()
lin_acc_z = df_imu_free['linear_acceleration.z'].tolist()

from prompt_toolkit.shortcuts.dialogs import Label
fig, ax = plt.subplots(figsize=(20,7))

plt.plot(time, lin_acc_x, label = "Accel_x")
plt.plot(time, lin_acc_y, label = "Accel_y")
plt.plot(time, lin_acc_z, label = "Accel_z")

# plt.xscale("time")
# plt.yscale("angukar")
plt.xlabel('time')
plt.ylabel('linear acceleration in XYZ axis')

plt.title("accel xyz")
plt.grid(False)

plt.legend()
plt.show()

from prompt_toolkit.shortcuts.dialogs import Label
fig, ax = plt.subplots(figsize=(20,7))

plt.plot(time,roll, label = "Gyro_x")
plt.plot(time, pitch, label = "Gyro_y")
plt.plot(time, yaw, label = "Gyro_z")
# plt.xscale("time")
# plt.yscale("angukar")

plt.xlabel('time')
plt.ylabel('Orienatton in XYZ axis (degree)')

plt.title("Orientation")


plt.legend()
plt.show()

import statistics
sns.set_style("white")
kwargs = dict(hist_kws={'alpha':.6}, kde_kws={'linewidth':2})
plt.figure(figsize=(10,7), dpi= 80)
sns.distplot(lin_acc_x, color="dodgerblue", label="Linear Acceleration in X", **kwargs)
plt.legend();

print("Mean is", statistics.mean(lin_acc_x))
print("Median is", statistics.median(lin_acc_x))
print("Standard Deviation is", statistics.stdev(lin_acc_x))

sns.set_style("white")
kwargs = dict(hist_kws={'alpha':.6}, kde_kws={'linewidth':2})
plt.figure(figsize=(10,7), dpi= 80)
sns.distplot(ang_acc_x, color="red", label="Angular velocity (rad/sec)", **kwargs)
plt.legend();

print("Mean is", np.mean(lin_acc_x))
print("Median is", np.mean(lin_acc_x))
print("Standarad Deviation is", np.mean(lin_acc_x))