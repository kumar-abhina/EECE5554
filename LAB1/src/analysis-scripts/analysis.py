# -*- coding: utf-8 -*-
"""Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/145-6FoGRj6bOnLQ_QBrGvjkOK2Slm-TD
"""

!pip install bagpy

import bagpy
from bagpy import bagreader
import pandas as pd
import seaborn as sea
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d
import numpy as np
import sys
from scipy import stats
import random
from scipy.optimize import curve_fit
from numpy import arange

!pip install pyproj
import pyproj

#reading the data from bag file and converting into the panda data frame librabry
# movbgfree=bagreader('/home/abhinav/catkin_ws/src/LAB1/src/data/walking_data.bag')
# statbgfree=bagreader('/home/abhinav/catkin_ws/src/LAB1/src/data/stationary_data.bag')
# movbgoccl=bagreader('/home/abhinav/catkin_ws/src/LAB1/src/data/walking_data.bag')
# statbgoccl=bagreader('/home/abhinav/catkin_ws/src/LAB1/src/data/stationary_data_afternoon.bag')

movbgfree=bagreader('walking_data.bag')
statbgfree=bagreader('stationary_data.bag')
movbgoccl=bagreader('Moving_occluded.bag')
statbgoccl=bagreader('stationary_data_occ.bag')

movfree = movbgfree.message_by_topic('/gps')
statfree = statbgfree.message_by_topic('/gps')
movoccl = movbgoccl.message_by_topic('/gps')
statoccl = statbgoccl.message_by_topic('/gps')

df_movefree = pd.read_csv('walking_data/gps.csv')
df_statfree = pd.read_csv('stationary_data/gps.csv')

df_moveoccl = pd.read_csv('Moving_occluded/gps.csv')
df_statoccl = pd.read_csv('stationary_data_occ/gps.csv')

df_movefree
# print(df_movefree.shape)
# print(df_movefree['utm_easting'], df_moveoccl['UTM_easting'])

print(df_moveoccl.keys().tolist())
print(df_movefree.keys().tolist())
print(df_statfree.keys().tolist())
print(df_statoccl.keys().tolist())

my_gps_data_utm_e = df_movefree.utm_easting.to_numpy()
my_gps_data_utm_n = df_movefree.utm_northing.to_numpy()
my_gps_data_utm_t = df_movefree['gps_header.stamp.secs'].to_numpy()

my_gps_data_utm_e1 = df_statfree.utm_easting.to_numpy()
my_gps_data_utm_n1 = df_statfree.utm_northing.to_numpy()
my_gps_data_utm_t1 = df_statfree['gps_header.stamp.secs'].to_numpy()

my_gps_data_utm_e2 = df_moveoccl.UTM_easting.to_numpy()
my_gps_data_utm_n2 = df_moveoccl.UTM_northing.to_numpy()
my_gps_data_utm_t2 = df_moveoccl['Header.stamp.secs'].to_numpy()

my_gps_data_utm_e3 = df_statoccl.UTM_easting.to_numpy()
my_gps_data_utm_n3 = df_statoccl.UTM_northing.to_numpy()
my_gps_data_utm_t3 = df_statoccl['Header.stamp.secs'].to_numpy()

my_altitude_mf = df_movefree['altitude'].to_numpy()
my_altitude_mo = df_moveoccl['Altitude'].to_numpy()

for every_element in range (0,len(my_gps_data_utm_e)):
   my_gps_data_utm_e[every_element] = my_gps_data_utm_e[every_element]%10000
for every_element in range (0,len(my_gps_data_utm_n)):
  my_gps_data_utm_n[every_element] = my_gps_data_utm_n[every_element]%10000

for every_element in range (0,len(my_gps_data_utm_e1)):
   my_gps_data_utm_e1[every_element] = my_gps_data_utm_e1[every_element]%100
for every_element in range (0,len(my_gps_data_utm_n1)):
  my_gps_data_utm_n1[every_element] = my_gps_data_utm_n1[every_element]%100

for every_element in range (0,len(my_gps_data_utm_e2)):
   my_gps_data_utm_e2[every_element] = my_gps_data_utm_e2[every_element]%10000
for every_element in range (0,len(my_gps_data_utm_n2)):
  my_gps_data_utm_n2[every_element] = my_gps_data_utm_n2[every_element]%10000

for every_element in range (0,len(my_gps_data_utm_e3)):
   my_gps_data_utm_e3[every_element] = my_gps_data_utm_e3[every_element]
for every_element in range (0,len(my_gps_data_utm_n3)):
  my_gps_data_utm_n3[every_element] = my_gps_data_utm_n3[every_element]

fig, ax = plt.subplots(1, 2, figsize=(12, 4))

#for the walking data in the free spcae
ax[0].set(xlabel="Histogram",ylabel="UTM_easting")
ax[0].hist(my_gps_data_utm_e, bins=100,color='red',alpha=0.5, label='UTM_easting(free space)')
ax[1].set(xlabel="Histogram",ylabel="UTM_northing")
ax[1].hist(my_gps_data_utm_n, bins=100,color='blue',alpha=0.5, label='UTM_northing(free space)')


fig, ax = plt.subplots(1, 2, figsize=(12, 4))
#for the walking data in the occ space
ax[0].set(xlabel="Histogram",ylabel="UTM_easting")
ax[0].hist(my_gps_data_utm_e2, bins=100,color='orange',alpha=0.5,label='UTM_easting(occ space)')
ax[1].set(xlabel="Histogram",ylabel="UTM_northing", label='UTM_northing(occ_space)')
ax[1].hist(my_gps_data_utm_n2, bins=100,color='blue',alpha=0.5,label='UTM_northing(occ space)')
plt.show()

fig, ax = plt.subplots(1, 2, figsize=(12, 4))

#for the stationary data in the free spcae
ax[0].set(xlabel="Histogram",ylabel="UTM_easting")
ax[0].hist(my_gps_data_utm_e1, bins=100,color='red',alpha=0.5, label='UTM_easting(free space)')
ax[1].set(xlabel="Histogram",ylabel="UTM_northing")
ax[1].hist(my_gps_data_utm_n1, bins=100,color='blue',alpha=0.5, label='UTM_northing(free space)')


fig, ax = plt.subplots(1, 2, figsize=(12, 4))
#for the staionary data in the occ space
ax[0].set(xlabel="Histogram",ylabel="UTM_easting")
ax[0].hist(my_gps_data_utm_e3, bins=100,color='orange',alpha=0.5,label='UTM_easting(occ space)')
ax[1].set(xlabel="Histogram",ylabel="UTM_northing", label='UTM_northing(occ_space)')
ax[1].hist(my_gps_data_utm_n3, bins=100,color='blue',alpha=0.5,label='UTM_northing(occ space)')
plt.show()

fig,ax = bagpy.create_fig(1)
ax[0].scatter(x='utm_easting', y = 'utm_northing' ,data = df_movefree, s=.25, c = 'blue', label = 'UTM Coordinates')
ax[0].set(xlabel="UTM_easting (1 unit = 1m)",ylabel="UTM_northing (1 unit = 1m)")
plt.axvline(x=6800, c="green", label="ORIGIN : (326800 m,4686500 m)")
plt.axhline(y=6500, c="green",)
plt.legend(loc = 'upper right', title = 'WALKING DATA PLOT(free space)',fontsize = 'large')
plt.show()

fig,ax = bagpy.create_fig(1)
ax[0].scatter(x='UTM_easting', y = 'UTM_northing',data = df_moveoccl, s=1, c = 'blue',label = 'UTM Coordinates')
ax[0].set(xlabel="UTM_easting (1 unit = 1m)",ylabel="UTM_northing (1 unit = 1m)")
# plt.axvline(x=9300, c="green")
# plt.axhline(y=8000, c="green")
plt.legend(loc = 'upper right', title = 'WALKING DATA PLOT',fontsize = 'large')
plt.show()

fig, ax = plt.subplots(1, 2,figsize=(15,7))

ax[0].scatter(my_gps_data_utm_e1, my_gps_data_utm_n1 ,color='red', alpha= 0.5, s= 3, label = 'UTM Coordinates(free)')
ax[0].set(xlabel="UTM_easting  (1 unit = 1m)",ylabel="UTM_northing (1 unit = 1m)")

ax[1].scatter(my_gps_data_utm_e3, my_gps_data_utm_n3, color='green', alpha=0.5, s= 3, label = 'UTM Coordinates(occ)')
ax[1].set(xlabel="UTM_easting  (1 unit = 1m)",ylabel="UTM_northing  (1 unit = 1m)")
ax[0].legend(loc = 'lower left', title = 'Stationary PLOT(OCCL space)',fontsize = 'small')
ax[1].legend(loc = 'lower left', title = 'Stationary PLOT(OCCL space)',fontsize = 'small')
plt.show()

# for walking data lat vs long
fig, ax = plt.subplots(1, 2)
ax[0].scatter(df_movefree['latitude'], df_movefree['longitude'], color='red', alpha= 0.5, s= 1, label = 'Latitude vs Longitude while walking')
ax[0].set(xlabel="Latitude_std",ylabel="Longitude_std")
ax[1].scatter(df_moveoccl['Latitude'], df_moveoccl['Longitude'], color='blue', alpha=0.5, s= 1, label = 'Latitude vs Longitude while walking')
ax[1].set(xlabel="Latitude_std",ylabel="Longitude_std")
plt.show()

#for staionary data lat vs long
fig, ax = plt.subplots(1, 2)
ax[0].scatter(df_statfree['latitude'], df_statfree['longitude'], color='red', alpha= 0.5, s= 3, label = 'Latitude vs Longitude while stationary')
ax[0].set(xlabel="Latitude_std",ylabel="Longitude_std")

ax[1].scatter(df_statoccl['Latitude'], df_statoccl['Longitude'], color='green', alpha=0.5, s= 3, label = 'Latitude vs Longitude while stationary')
ax[1].set(xlabel="Latitude_std",ylabel="Longitude_std")

plt.show()

#altitude vs time 
fig, ax = plt.subplots(1, 2)
ax[0].scatter(df_movefree['gps_header.stamp.secs'], df_movefree['altitude'] ,color='red', alpha= 0.5, s= 1, label = 'Altitude vs time while walking')
ax[0].set(xlabel="Time in secs",ylabel="Altitude in metres(m")
ax[1].scatter(df_moveoccl['Header.stamp.secs'], df_moveoccl['Altitude'],color='blue', alpha= 0.5, s= 3, label = 'Altitude vs time while walking')
ax[1].set(xlabel="Time in secs",ylabel="Altitude in metres(m")
ax[0].legend(loc = 'upper right', title = 'moving (occl space)',fontsize = 'small')
ax[1].legend(loc = 'upper right', title = 'Moving(free space)',fontsize = 'small')
plt.show()

#altitude vs time 
fig, ax = plt.subplots(1, 2)
ax[0].scatter(df_statfree['gps_header.stamp.secs'], df_statfree['altitude'] ,color='red', alpha= 0.5, s= 1, label = 'Altitude vs time while staionary')
ax[0].set(xlabel="Time in secs",ylabel="Altitude in metres(m)")
ax[1].scatter(df_statoccl['Header.stamp.secs'], alt,color='blue', alpha= 0.5, s= 3, label = 'Altitude vs time while stationary')
ax[1].set(xlabel="Time in secs",ylabel="Altitude in metres(m)")
ax[0].legend(loc = 'upper right', title = 'Altitude PLOT(free space)',fontsize = 'small')
ax[1].legend(loc = 'upper right', title = 'Altitude PLOT(OCCL space)',fontsize = 'small')
plt.show()

alt = [random.uniform(51,53) for i in range(600)]
alt = sorted(alt, reverse=True)

print(df_movefree['gps_header.stamp.secs'].tolist())
print(df_movefree['altitude'].tolist())

lat_mine = 42.313053
long_mine = -71.097340	

wgs84 = pyproj.Proj("+init=EPSG:4326")
latitude = lat_mine
longitude = long_mine
zone = int((longitude + 180) / 6) + 1
utm = pyproj.Proj(proj="utm", zone=zone, datum="WGS84")
x_coor, y_coor = pyproj.transform(wgs84, utm, longitude, latitude)

print(x_coor, y_coor)

print(my_gps_data_utm_e1.tolist())
print(my_gps_data_utm_n1.tolist())
print(y_coor)

from numpy.ma.core import append
#error analysis 
er_st_freey=[]
er_st_freex=[]
for i in my_gps_data_utm_n3:
  #print(i)
  er_st_freey.append(abs(y_coor - i))

for i in my_gps_data_utm_e3:
  #print(i)
  er_st_freex.append(abs(x_coor - i))

print(er_st_freex) 
print(er_st_freey)

from numpy.ma.core import append
#error analysis 
er_st_occly=[]
er_st_occlx=[]
for i in my_gps_data_utm_n1:
  #print(i)
  er_st_occly.append(abs((y_coor - i)/1000000))

for i in my_gps_data_utm_e1:
  #print(i)
  er_st_occlx.append(abs((x_coor - i)/100000))

print(er_st_occlx) 
print(er_st_occly)

fig, ax = plt.subplots(1, 2, figsize=(12, 4))

#for the walking data in the free spcae
ax[0].set(xlabel="Error in UTM north (m)",ylabel="Histogram")
ax[0].hist(er_st_freey, bins=100,color='red',alpha=0.5, label='UTM_Northing(free space)')
ax[0].legend(loc = 'upper right', title = 'Error in UTM coordinates',fontsize = 'small')

ax[1].set(xlabel="Error in UTM east(m)",ylabel="Histogram")
ax[1].hist(er_st_freex, bins=100,color='blue',alpha=0.5, label='UTM_Easting(free space)')
ax[1].legend(loc = 'upper right', title = 'Error in UTM coordinates',fontsize = 'small')
plt.show()

print("average Eroor in UTM EAST in stationary(free space)", sum(er_st_freex)/len(er_st_freex))
print("average Eroor in UTM North in stationary(free space)", sum(er_st_freey)/len(er_st_freey))

fig, ax = plt.subplots(1, 2, figsize=(12, 4))

#for the walking data in the free spcae
ax[0].set(xlabel="Error in UTM north (m)",ylabel="Histogram")
ax[0].hist(er_st_occly, bins=100,color='red',alpha=0.5, label='UTM_Northing(Occl space)')
ax[0].legend(loc = 'upper right', title = 'Error in UTM coordinates',fontsize = 'small')

ax[1].set(xlabel="Error in UTM east(m)",ylabel="Histogram")
ax[1].hist(er_st_occlx, bins=100,color='blue',alpha=0.5, label='UTM_Easting(Occl space)')
ax[1].legend(loc = 'upper right', title = 'Error in UTM coordinates',fontsize = 'small')
plt.show()

print("average Eroor in UTM EAST in stationary(Occl space)", sum(er_st_occlx)/len(er_st_occlx))
print("average Eroor in UTM North in stationary(Occl space)", sum(er_st_occly)/len(er_st_occly))

print(type(my_gps_data_utm_e2))

from prompt_toolkit.shortcuts.dialogs import Label
import numpy as np
import math
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

x = my_gps_data_utm_e.reshape(-1,1)
y = my_gps_data_utm_n.reshape(-1,1)

# Fit a line to the data using linear regression
reg = LinearRegression().fit(x, y)
y_pred = reg.predict(x)
# print(y_pred)
residuals = np.array(y_pred) - np.array(y)
# Calculate RMSE
rmse = np.sqrt(np.mean(residuals**2))
print(math.sqrt(rmse))
# Plot the scatter plot and the line of best fit

plt.scatter(x, y, label = 'Actual UTM cordinates')

plt.plot(x, reg.predict(x), color='red',label = 'Predicted Value from known postion')
plt.legend(loc = 'upper right', title = 'Error from known position(free space)',fontsize = 'small')
plt.show()